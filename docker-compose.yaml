services:
  postgres:
    image: quay.io/debezium/postgres:15
    container_name: postgres_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:7.9.0
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      
      # KRaft settings
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:29093"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_LISTENERS: "PLAINTEXT://kafka:9092,PLAINTEXT_HOST://0.0.0.0:29092,CONTROLLER://kafka:29093"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092"
      KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"

      # Other Kafka settings
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      CLUSTER_ID: "MkU3OEVBNTcwNTJENDM2Qk"
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - app-network
    
    # This command formats the storage directories on first startup
    command: >
      bash -c '
      if [ ! -f /var/lib/kafka/data/meta.properties ]; then
        echo "Creating Kafka storage directory"
        mkdir -p /tmp/kraft-combined-logs
        
        echo "Creating kafka.properties file"
        echo "node.id=${KAFKA_NODE_ID}" > /tmp/kafka.properties
        echo "process.roles=${KAFKA_PROCESS_ROLES}" >> /tmp/kafka.properties
        echo "controller.quorum.voters=${KAFKA_CONTROLLER_QUORUM_VOTERS}" >> /tmp/kafka.properties
        
        echo "Formatting Kafka storage"
        kafka-storage format -t ${CLUSTER_ID} -c /tmp/kafka.properties
      fi
      
      exec /etc/confluent/docker/run
      '

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    networks:
      - app-network

  debezium:
    image: debezium/connect:2.7.3.Final
    container_name: debezium
    depends_on:
      - kafka
      - postgres
    ports:
      - "8083:8083"
    environment:
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: connect_configs
      OFFSET_STORAGE_TOPIC: connect_offsets
      STATUS_STORAGE_TOPIC: connect_statuses
      BOOTSTRAP_SERVERS: kafka:9092
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      VALUE_CONVERTER_SCHEMAS_ENABLE: "true"
      
      # Automatically register connectors from the mounted config directory
      CONNECT_REST_ADVERTISED_HOST_NAME: "debezium"
      CONNECT_CONNECTOR_CLIENT_CONFIG_OVERRIDE_POLICY: "All"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/connectors"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 15s
    networks:
      - app-network

    # Add MinIO service
  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    command: server --console-address ":9001" /data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - app-network

  # MinIO Client for bucket setup
  mc:
    image: minio/mc:latest
    container_name: mc
    depends_on:
      - minio
    environment:
      MC_HOST_minio: http://minioadmin:minioadmin@minio:9000
    entrypoint: >
      /bin/sh -c "
      echo 'Waiting for MinIO to be available...' &&
      until mc ready minio; do sleep 1; done &&
      echo 'Creating datalake bucket...' &&
      mc mb minio/datalake --ignore-existing &&
      echo 'All MinIO buckets created successfully!';
      exit 0;
      "
    networks:
      - app-network

  spark:
    image: docker.io/bitnami/spark:3.5.5
    container_name: spark
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - '8090:8080'
      - '7077:7077'
    volumes:
      - ./spark/scripts:/opt/bitnami/spark/scripts
      - ./spark/checkpoints:/opt/bitnami/spark/checkpoints
    networks:
      - app-network

  connector-setup:
    build:
      context: ./connector-setup
      dockerfile: Dockerfile
    container_name: connector-setup
    depends_on:
      debezium:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - ./connector-setup:/app
    networks:
      - app-network
    entrypoint: >
      /bin/sh -c "
      echo 'Starting connector setup...' &&
      python /app/create_connector.py &&
      echo 'Connector setup complete!'
      "

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  kafka_data:
  minio_data: